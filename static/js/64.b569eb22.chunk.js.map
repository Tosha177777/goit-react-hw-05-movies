{"version":3,"file":"static/js/64.b569eb22.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/CastComponent.jsx","pages/CastPage.jsx","../node_modules/@chakra-ui/card/src/card-body.tsx","../node_modules/@chakra-ui/card/src/card-context.tsx","../node_modules/@chakra-ui/card/src/card.tsx","../node_modules/@chakra-ui/layout/src/stack/stack-item.tsx","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/src/stack/stack.tsx","../node_modules/@chakra-ui/layout/src/stack/stack.utils.tsx","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movie_List\":\"Cast_movie_List__7ZgqQ\",\"movie_card\":\"Cast_movie_card__4smv7\",\"titleMain\":\"Cast_titleMain__XzErP\",\"castBox\":\"Cast_castBox__KVoEk\"};","import React from 'react';\nimport css from './Cast.module.css';\nimport { Card, CardBody, Heading, Image, Stack, Text } from '@chakra-ui/react';\n\nconst CastComponent = ({ actors }) => {\n  const defaultImg =\n    'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=200x300';\n  return (\n    <ul className={css.movie_List}>\n      {actors.map(({ id, character, name, popularity, profile_path }) => {\n        return (\n          <li key={id}>\n            <Card maxW=\"200px\" h={`359px`}>\n              <CardBody>\n                <Image\n                  h={`240px`}\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w200${profile_path}`\n                      : defaultImg\n                  }\n                  alt=\"\"\n                  borderRadius=\"lg\"\n                />\n                <Stack mt=\"8px\" spacing=\"1.5px\">\n                  <Heading\n                    fontSize={`16px`}\n                    textOverflow={`ellipsis`}\n                    overflow={`hidden`}\n                    whiteSpace={`nowrap`}\n                  >\n                    {character}\n                  </Heading>\n                  <Text\n                    textOverflow={`ellipsis`}\n                    overflow={`hidden`}\n                    whiteSpace={`nowrap`}\n                  >\n                    Name: {name}\n                  </Text>\n                  <Text>Popularity: {popularity}</Text>\n                </Stack>\n              </CardBody>\n            </Card>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default CastComponent;\n","import CastComponent from 'components/Cast/CastComponent';\nimport fetchMovies from 'components/Service/api';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst CastPage = () => {\n  const { movieId } = useParams();\n  const [actor, setActor] = useState([]);\n  useEffect(() => {\n    const fetchAllMovies = async () => {\n      try {\n        const dataMovies = await fetchMovies(`movie/${movieId}/credits`);\n        setActor(dataMovies.cast);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchAllMovies();\n  }, [movieId]);\n\n  return (\n    <div>\n      <CastComponent actors={actor} />\n    </div>\n  );\n};\n\nexport default CastPage;\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardBodyProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardBody = forwardRef<CardBodyProps, \"div\">(function CardBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const styles = useCardStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card__body\", className)}\n      __css={styles.body}\n      {...rest}\n    />\n  )\n})\n","import { createStylesContext } from \"@chakra-ui/system\"\n\nexport const [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\")\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  ThemingProps,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { CardStylesProvider } from \"./card-context\"\n\nexport type CardOptions = {\n  /**\n   * The flex direction of the card\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * The flex alignment of the card\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The flex distribution of the card\n   */\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport interface CardProps\n  extends HTMLChakraProps<\"div\">,\n    CardOptions,\n    ThemingProps<\"Card\"> {}\n\nexport const Card = forwardRef<CardProps, \"div\">(function Card(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Card\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card\", className)}\n      __css={{\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container,\n      }}\n      {...rest}\n    >\n      <CardStylesProvider value={styles}>{children}</CardStylesProvider>\n    </chakra.div>\n  )\n})\n","import { ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nStackItem.displayName = \"StackItem\"\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n","import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value: keyof typeof dividerStyles) => dividerStyles[value],\n    ),\n  }\n}\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n"],"names":["actors","className","css","map","id","character","name","popularity","profile_path","maxW","h","src","alt","borderRadius","mt","spacing","fontSize","textOverflow","overflow","whiteSpace","movieId","useParams","useState","actor","setActor","useEffect","fetchAllMovies","fetchMovies","dataMovies","cast","console","error","ref","chakra","rest","styles","useCardStyles","div","__css","cx","props","CardBody","forwardRef","createStylesContext","CardStylesProvider","children","direction","useMultiStyleConfig","justify","align","display","Card","omitThemingProps","justifyContent","alignItems","position","minWidth","wordWrap","container","value","StackItem","flex","displayName","Object","freeze","isInline","Fragment","directionProp","wrap","divider","shouldWrapChildren","dividerStyle","getDividerStyles","hasDivider","shouldUseChildren","Stack","options","prop","mapper","dividerStyles","column","my","mx","borderLeftWidth","borderBottomWidth","row","Array","isArray","item","isObject","keys","reduce","result","key","clones","validChildren","child","Children","filter","isValidElement","index","isLast","length","wrappedChild","clonedDivider","getValidChildren","useMemo","_divider","_className","jsxs","cloneElement","flexDirection","flexWrap","gap"],"sourceRoot":""}