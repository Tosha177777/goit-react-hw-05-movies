{"version":3,"file":"static/js/294.43bd2dc0.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Reviews/Reviews.module.css?7248","../node_modules/@chakra-ui/card/src/card-header.tsx","../node_modules/@chakra-ui/card/src/card-footer.tsx","components/Reviews/Reviews.jsx","pages/ReviewsPage.jsx","../node_modules/@chakra-ui/card/src/card-body.tsx","../node_modules/@chakra-ui/card/src/card-context.tsx","../node_modules/@chakra-ui/card/src/card.tsx","../node_modules/@chakra-ui/layout/src/stack/stack-item.tsx","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/src/stack/stack.tsx","../node_modules/@chakra-ui/layout/src/stack/stack.utils.tsx","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"reviewsList\":\"Reviews_reviewsList__hDAQA\",\"reviewsContent\":\"Reviews_reviewsContent__uAAxd\"};","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardHeaderProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardHeader = forwardRef<CardHeaderProps, \"div\">(\n  function CardHeader(props, ref) {\n    const { className, ...rest } = props\n    const styles = useCardStyles()\n    return (\n      <chakra.div\n        ref={ref}\n        className={cx(\"chakra-card__header\", className)}\n        __css={styles.header}\n        {...rest}\n      />\n    )\n  },\n)\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  chakra,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardFooterProps extends HTMLChakraProps<\"div\"> {\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport const CardFooter = forwardRef<CardFooterProps, \"div\">(\n  function CardFooter(props, ref) {\n    const { className, justify, ...rest } = props\n    const styles = useCardStyles()\n    return (\n      <chakra.div\n        ref={ref}\n        className={cx(\"chakra-card__footer\", className)}\n        __css={{\n          display: \"flex\",\n          justifyContent: justify,\n          ...styles.footer,\n        }}\n        {...rest}\n      />\n    )\n  },\n)\n","import React from 'react';\nimport css from './Reviews.module.css';\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Heading,\n  Image,\n  Stack,\n  Text,\n} from '@chakra-ui/react';\n\nconst Reviews = ({ comments }) => {\n  const defaultImg =\n    'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=200x300';\n  return (\n    <>\n      {comments && comments.length > 0 ? (\n        <ul className={css.reviewsList}>\n          {comments.map(\n            ({\n              author_details: { name, avatar_path, username },\n              content,\n              created_at,\n              id,\n              updated_at,\n            }) => {\n              return (\n                <li key={id}>\n                  <Card\n                    direction={{ base: 'column', sm: 'row' }}\n                    overflow=\"hidden\"\n                    variant=\"outline\"\n                  >\n                    <Image\n                      objectFit=\"cover\"\n                      maxW={{ base: '100%', sm: '200px' }}\n                      src={\n                        avatar_path\n                          ? `https://image.tmdb.org/t/p/w200${avatar_path}`\n                          : defaultImg\n                      }\n                      alt=\"\"\n                    />\n\n                    <Stack>\n                      <CardBody>\n                        <CardHeader p={`0 0 0 20px`}>\n                          <Text py=\"2\" fontStyle={`italic`}>\n                            Created at: {created_at}\n                          </Text>\n                        </CardHeader>\n                        <Heading size=\"md\">{username}</Heading>\n                        <Text py=\"2\">{name}</Text>\n                        <Text py=\"2\" h={`150px`} overflowY={`scroll`}>\n                          {content}\n                        </Text>\n\n                        <CardFooter p={`0 0 0 20px`}>\n                          <Text py=\"2\" fontStyle={`italic`}>\n                            Updated at: {updated_at}\n                          </Text>\n                        </CardFooter>\n                      </CardBody>\n                    </Stack>\n                  </Card>\n                </li>\n              );\n            }\n          )}\n        </ul>\n      ) : (\n        <p>Sorry, there're no comments yet</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import Reviews from 'components/Reviews/Reviews';\nimport fetchMovies from 'components/Service/api';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst ReviewsPage = () => {\n  const { movieId } = useParams();\n  const [comments, setComments] = useState(null);\n  useEffect(() => {\n    const fetchAllMovies = async () => {\n      try {\n        const dataMovies = await fetchMovies(`movie/${movieId}/reviews`);\n        setComments(dataMovies.results);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchAllMovies();\n  }, [movieId]);\n\n  return (\n    <>\n      <Reviews comments={comments} />\n    </>\n  );\n};\n\nexport default ReviewsPage;\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardBodyProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardBody = forwardRef<CardBodyProps, \"div\">(function CardBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const styles = useCardStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card__body\", className)}\n      __css={styles.body}\n      {...rest}\n    />\n  )\n})\n","import { createStylesContext } from \"@chakra-ui/system\"\n\nexport const [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\")\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  ThemingProps,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { CardStylesProvider } from \"./card-context\"\n\nexport type CardOptions = {\n  /**\n   * The flex direction of the card\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * The flex alignment of the card\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The flex distribution of the card\n   */\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport interface CardProps\n  extends HTMLChakraProps<\"div\">,\n    CardOptions,\n    ThemingProps<\"Card\"> {}\n\nexport const Card = forwardRef<CardProps, \"div\">(function Card(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Card\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card\", className)}\n      __css={{\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container,\n      }}\n      {...rest}\n    >\n      <CardStylesProvider value={styles}>{children}</CardStylesProvider>\n    </chakra.div>\n  )\n})\n","import { ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nStackItem.displayName = \"StackItem\"\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n","import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value: keyof typeof dividerStyles) => dividerStyles[value],\n    ),\n  }\n}\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n"],"names":["ref","chakra","rest","styles","useCardStyles","div","__css","cx","props","CardHeader","forwardRef","justify","CardFooter","justifyContent","footer","comments","length","className","css","map","author_details","name","avatar_path","username","content","created_at","id","updated_at","direction","base","sm","overflow","variant","objectFit","maxW","src","alt","p","py","fontStyle","size","h","overflowY","movieId","useParams","useState","setComments","useEffect","fetchAllMovies","fetchMovies","dataMovies","results","console","error","CardBody","createStylesContext","CardStylesProvider","children","useMultiStyleConfig","align","display","Card","omitThemingProps","alignItems","position","minWidth","wordWrap","container","value","StackItem","flex","displayName","Object","freeze","isInline","Fragment","directionProp","spacing","wrap","divider","shouldWrapChildren","dividerStyle","getDividerStyles","hasDivider","shouldUseChildren","Stack","options","prop","mapper","dividerStyles","column","my","mx","borderLeftWidth","borderBottomWidth","row","Array","isArray","item","isObject","keys","reduce","result","key","clones","validChildren","child","Children","filter","isValidElement","index","isLast","wrappedChild","clonedDivider","getValidChildren","useMemo","_divider","_className","jsxs","cloneElement","flexDirection","flexWrap","gap"],"sourceRoot":""}