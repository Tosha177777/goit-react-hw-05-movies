{"version":3,"file":"static/js/64.fb1c2200.chunk.js","mappings":"wOACA,EAA6B,yB,qECkD7B,EA/CsB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OAGvB,OACE,eAAIC,UAAWC,EAAf,SACGF,EAAOG,KAAI,YAAwD,IAArDC,EAAoD,EAApDA,GAAIC,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aAC9C,OACE,yBACE,SAAC,IAAD,CAAMC,KAAK,QAAQC,EAAC,QAApB,UACE,UAAC,IAAD,YACE,SAAC,IAAD,CACEA,EAAC,QACDC,IACEH,EAAY,yCAC0BA,GAZtD,6EAecI,IAAI,GACJC,aAAa,QAEf,UAAC,IAAD,CAAOC,GAAG,MAAMC,QAAQ,QAAxB,WACE,SAAC,IAAD,CACEC,SAAQ,OACRC,aAAY,WACZC,SAAQ,SACRC,WAAU,SAJZ,SAMGd,KAEH,UAAC,IAAD,CACEY,aAAY,WACZC,SAAQ,SACRC,WAAU,SAHZ,UAIC,SACQb,MAET,UAAC,IAAD,WAAM,eAAaC,cA7BlBH,EAmCZ,KAGN,E,oBCtBD,EAtBiB,WACf,IAAQgB,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAaA,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,8GAEMC,EAAAA,EAAAA,GAAY,SAAD,OAAUP,EAAV,aAFjB,OAEbQ,EAFa,OAGnBJ,EAASI,EAAWC,MAHD,gDAKnBC,QAAQC,MAAR,MALmB,yDAAH,qDAQpBL,GACD,GAAE,CAACN,KAGF,0BACE,SAAC,EAAD,CAAepB,OAAQuB,KAG5B,C,gJChBGS,GAAWC,EAAAA,EAAAA,IAAW,SAAmBC,EAAOC,GAClD,IAAQC,EAAuBF,EAAvBE,UAAcC,GAAtB,OAA+BH,EAA/B,GACMI,GAASC,EAAAA,EAAAA,KACf,OAAuBC,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,KADwB,QAGtBN,IAAAA,EACAC,WAAWM,EAAAA,EAAAA,IAAG,oBAAqBN,GACnC,MAAOE,EAAO,MACXD,GAGR,G,4FCjBD,GAA0CM,E,QAAAA,IAAoB,QAA9D,eAAKC,EAAL,KAAyBR,EAAzB,I,6MCUIJ,GAAOC,EAAAA,EAAAA,IAAW,SAAeY,EAAOC,GAC1C,OAOIC,EAAAA,EAAAA,IAAiBF,GANnBG,EADF,EACEA,UACAC,EAFF,EAEEA,SAFF,IAGEf,UAAAA,OAHF,MAGc,SAHd,EAIEC,EAJF,EAIEA,QACAE,EALF,EAKEA,MACGC,GANL,YAQMY,GAASC,EAAAA,EAAAA,IAAoB,OAAQN,GAC3C,OAAuBL,EAAAA,EAAAA,KACrBY,EAAAA,EAAAA,KADwB,gBAGtBN,IAAAA,EACAE,WAAWN,EAAAA,EAAAA,IAAG,cAAeM,GAC7BK,OAAK,QACHC,QAAS,OACTC,cAAerB,EACfsB,eAAgBrB,EAChBsB,WAAYpB,EACZqB,SAAU,WACVd,SAAU,EACVe,SAAU,cACPT,EAAO,YAETZ,GAfmB,IAgBtBW,UAA0BT,EAAAA,EAAAA,KAAID,EAAAA,EAAoB,CAAE,MAAOW,EAAQD,SAAAA,MAGxE,G","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/CastComponent.jsx","pages/CastPage.jsx","../node_modules/@chakra-ui/card/src/card-body.tsx","../node_modules/@chakra-ui/card/src/card-context.tsx","../node_modules/@chakra-ui/card/src/card.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movie_List\":\"Cast_movie_List__7ZgqQ\",\"movie_card\":\"Cast_movie_card__4smv7\",\"titleMain\":\"Cast_titleMain__XzErP\",\"castBox\":\"Cast_castBox__KVoEk\"};","import React from 'react';\nimport css from './Cast.module.css';\nimport { Card, CardBody, Heading, Image, Stack, Text } from '@chakra-ui/react';\n\nconst CastComponent = ({ actors }) => {\n  const defaultImg =\n    'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=200x300';\n  return (\n    <ul className={css.movie_List}>\n      {actors.map(({ id, character, name, popularity, profile_path }) => {\n        return (\n          <li key={id}>\n            <Card maxW=\"200px\" h={`359px`}>\n              <CardBody>\n                <Image\n                  h={`240px`}\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w200${profile_path}`\n                      : defaultImg\n                  }\n                  alt=\"\"\n                  borderRadius=\"lg\"\n                />\n                <Stack mt=\"8px\" spacing=\"1.5px\">\n                  <Heading\n                    fontSize={`16px`}\n                    textOverflow={`ellipsis`}\n                    overflow={`hidden`}\n                    whiteSpace={`nowrap`}\n                  >\n                    {character}\n                  </Heading>\n                  <Text\n                    textOverflow={`ellipsis`}\n                    overflow={`hidden`}\n                    whiteSpace={`nowrap`}\n                  >\n                    Name: {name}\n                  </Text>\n                  <Text>Popularity: {popularity}</Text>\n                </Stack>\n              </CardBody>\n            </Card>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default CastComponent;\n","import CastComponent from 'components/Cast/CastComponent';\nimport fetchMovies from 'components/Service/api';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst CastPage = () => {\n  const { movieId } = useParams();\n  const [actor, setActor] = useState([]);\n  useEffect(() => {\n    const fetchAllMovies = async () => {\n      try {\n        const dataMovies = await fetchMovies(`movie/${movieId}/credits`);\n        setActor(dataMovies.cast);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchAllMovies();\n  }, [movieId]);\n\n  return (\n    <div>\n      <CastComponent actors={actor} />\n    </div>\n  );\n};\n\nexport default CastPage;\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardBodyProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardBody = forwardRef<CardBodyProps, \"div\">(function CardBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const styles = useCardStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card__body\", className)}\n      __css={styles.body}\n      {...rest}\n    />\n  )\n})\n","import { createStylesContext } from \"@chakra-ui/system\"\n\nexport const [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\")\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  ThemingProps,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { CardStylesProvider } from \"./card-context\"\n\nexport type CardOptions = {\n  /**\n   * The flex direction of the card\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * The flex alignment of the card\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The flex distribution of the card\n   */\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport interface CardProps\n  extends HTMLChakraProps<\"div\">,\n    CardOptions,\n    ThemingProps<\"Card\"> {}\n\nexport const Card = forwardRef<CardProps, \"div\">(function Card(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Card\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card\", className)}\n      __css={{\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container,\n      }}\n      {...rest}\n    >\n      <CardStylesProvider value={styles}>{children}</CardStylesProvider>\n    </chakra.div>\n  )\n})\n"],"names":["actors","className","css","map","id","character","name","popularity","profile_path","maxW","h","src","alt","borderRadius","mt","spacing","fontSize","textOverflow","overflow","whiteSpace","movieId","useParams","useState","actor","setActor","useEffect","fetchAllMovies","fetchMovies","dataMovies","cast","console","error","ref","chakra","rest","styles","useCardStyles","div","__css","cx","props","CardBody","forwardRef","createStylesContext","CardStylesProvider","children","direction","useMultiStyleConfig","justify","align","display","Card","omitThemingProps","justifyContent","alignItems","position","minWidth","wordWrap","container","value"],"sourceRoot":""}