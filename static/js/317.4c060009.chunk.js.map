{"version":3,"file":"static/js/317.4c060009.chunk.js","mappings":"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","sources":["components/Service/api.js","webpack://react-homework-template/./src/components/HomeMovieList/HomeMovieList.module.css?7b57","components/HomeMovieList/HomeMovieList.jsx","pages/HomePage.jsx","../node_modules/@chakra-ui/card/src/card-body.tsx","../node_modules/@chakra-ui/card/src/card-context.tsx","../node_modules/@chakra-ui/card/src/card.tsx","../node_modules/@chakra-ui/image/src/native-image.tsx","../node_modules/@chakra-ui/image/src/use-image.ts","../node_modules/@chakra-ui/image/src/image.tsx","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","../node_modules/@chakra-ui/layout/src/heading.tsx","../node_modules/@chakra-ui/layout/src/stack/stack-item.tsx","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/src/stack/stack.tsx","../node_modules/@chakra-ui/layout/src/stack/stack.utils.tsx","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '08e108d01762394f2ae50fa4fb841dfd';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nconst fetchMovies = async url => {\n  const { data } = await instance.get(url);\n  return data;\n};\n\nexport default fetchMovies;\n","// extracted by mini-css-extract-plugin\nexport default {\"movie_List\":\"HomeMovieList_movie_List__vclKl\",\"movie_card\":\"HomeMovieList_movie_card__PP6aO\",\"titleMain\":\"HomeMovieList_titleMain__nBhpT\"};","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport css from './HomeMovieList.module.css';\nimport { Card, CardBody, Heading, Image, Stack, Text } from '@chakra-ui/react';\n\nconst HomeMovieList = ({ movies }) => {\n  const location = useLocation();\n\n  const defaultImg =\n    'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=200x300';\n  return (\n    <ul className={css.movie_List}>\n      {movies.map(({ id, title, vote_average, vote_count, poster_path }) => {\n        return (\n          <li key={id}>\n            <Link state={{ from: location }} to={`/movies/${id}`}>\n              <Card maxW=\"200px\" h={`359px`}>\n                <CardBody>\n                  <Image\n                    h={`240px`}\n                    src={\n                      poster_path\n                        ? `https://image.tmdb.org/t/p/w200${poster_path}`\n                        : defaultImg\n                    }\n                    alt=\"\"\n                    borderRadius=\"lg\"\n                  />\n                  <Stack mt=\"8px\" spacing=\"1.5px\">\n                    <Heading\n                      fontSize={`16px`}\n                      textOverflow={`ellipsis`}\n                      overflow={`hidden`}\n                      whiteSpace={`nowrap`}\n                    >\n                      {title}\n                    </Heading>\n                    <Text color={`grey`}>Rating: {vote_average}</Text>\n                    <Text color={`grey`}>Vote Count: {vote_count}</Text>\n                  </Stack>\n                </CardBody>\n              </Card>\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default HomeMovieList;\n","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport fetchMovies from 'components/Service/api';\nimport HomeMovieList from 'components/HomeMovieList/HomeMovieList';\n\nconst HomePage = () => {\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    const fetchAllMovies = async () => {\n      try {\n        const dataMovies = await fetchMovies('/trending/movie/day');\n        const results = dataMovies.results;\n        setMovies(results);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchAllMovies();\n  }, []);\n\n  return (\n    <div>\n      <HomeMovieList movies={movies} />\n    </div>\n  );\n};\n\nexport default HomePage;\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardBodyProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardBody = forwardRef<CardBodyProps, \"div\">(function CardBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const styles = useCardStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card__body\", className)}\n      __css={styles.body}\n      {...rest}\n    />\n  )\n})\n","import { createStylesContext } from \"@chakra-ui/system\"\n\nexport const [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\")\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  ThemingProps,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { CardStylesProvider } from \"./card-context\"\n\nexport type CardOptions = {\n  /**\n   * The flex direction of the card\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * The flex alignment of the card\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The flex distribution of the card\n   */\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport interface CardProps\n  extends HTMLChakraProps<\"div\">,\n    CardOptions,\n    ThemingProps<\"Card\"> {}\n\nexport const Card = forwardRef<CardProps, \"div\">(function Card(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Card\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card\", className)}\n      __css={{\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container,\n      }}\n      {...rest}\n    >\n      <CardStylesProvider value={styles}>{children}</CardStylesProvider>\n    </chakra.div>\n  )\n})\n","import { PropsOf, forwardRef } from \"@chakra-ui/system\"\n\nexport interface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nexport const NativeImage = forwardRef(function NativeImage(\n  props: NativeImageProps,\n  ref: React.Ref<any>,\n) {\n  const { htmlWidth, htmlHeight, alt, ...rest } = props\n  return (\n    <img width={htmlWidth} height={htmlHeight} ref={ref} alt={alt} {...rest} />\n  )\n})\n\nNativeImage.displayName = \"NativeImage\"\n","import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport {\n  FallbackStrategy,\n  shouldShowFallbackImage,\n  useImage,\n  UseImageProps,\n} from \"./use-image\"\nimport { NativeImage, NativeImageOptions } from \"./native-image\"\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note 🚨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n\n  /**\n   * - beforeLoadOrError(default): loads the fallbackImage while loading the src\n   * - onError: loads the fallbackImage only if there is an error fetching the src\n   *\n   * @default \"beforeLoadOrError\"\n   * @see Issue https://github.com/chakra-ui/chakra-ui/issues/5581\n   */\n  fallbackStrategy?: FallbackStrategy\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   * @type React.HTMLAttributeReferrerPolicy\n   */\n  referrerPolicy?: React.HTMLAttributeReferrerPolicy\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">(function Image(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props\n\n  const providedFallback = fallbackSrc !== undefined || fallback !== undefined\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n  const shouldIgnoreFallbackImage =\n    loading != null ||\n    // use can opt out of fallback image\n    ignoreFallback ||\n    // if the user doesn't provide any kind of fallback we should ignore it\n    !providedFallback\n\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage,\n  })\n\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nImage.displayName = \"Image\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import { ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nStackItem.displayName = \"StackItem\"\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n","import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value: keyof typeof dividerStyles) => dividerStyles[value],\n    ),\n  }\n}\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n"],"names":["instance","axios","baseURL","params","api_key","fetchMovies","url","get","data","movies","location","useLocation","className","css","map","id","title","vote_average","vote_count","poster_path","state","from","to","maxW","h","src","alt","borderRadius","mt","spacing","fontSize","textOverflow","overflow","whiteSpace","color","useState","setMovies","useEffect","fetchAllMovies","dataMovies","results","console","error","ref","chakra","rest","styles","useCardStyles","div","__css","cx","props","CardBody","forwardRef","createStylesContext","CardStylesProvider","children","direction","useMultiStyleConfig","justify","align","display","Card","omitThemingProps","justifyContent","alignItems","position","minWidth","wordWrap","container","value","htmlWidth","htmlHeight","width","height","NativeImage","displayName","fallback","keysToOmit","srcSet","fit","loading","ignoreFallback","crossOrigin","fallbackStrategy","referrerPolicy","providedFallback","shouldIgnoreFallbackImage","status","useImage","showFallbackImage","shared","objectFit","onLoad","onError","sizes","setStatus","imageRef","useRef","load","useCallback","flush","img","Image","srcset","onload","event","onerror","current","useSafeLayoutEffect","omit","objectPosition","as","Object","assign","key","clone","fallbackSrc","object","useStyleConfig","textAlign","decoration","casing","aliasedProps","textDecoration","compact","textTransform","p","Text","h2","Heading","StackItem","flex","freeze","isInline","Fragment","directionProp","wrap","divider","shouldWrapChildren","dividerStyle","getDividerStyles","hasDivider","shouldUseChildren","Stack","options","prop","mapper","dividerStyles","column","my","mx","borderLeftWidth","borderBottomWidth","row","Array","isArray","item","isObject","keys","reduce","result","clones","validChildren","child","Children","filter","isValidElement","index","isLast","length","wrappedChild","clonedDivider","getValidChildren","useMemo","_divider","_className","jsxs","cloneElement","flexDirection","flexWrap","gap"],"sourceRoot":""}